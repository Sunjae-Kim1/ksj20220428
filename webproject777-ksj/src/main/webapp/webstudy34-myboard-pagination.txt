**Servlet 기본 개념**

HTTP : HyperText Transfer Protocol 

Web Server : HTTP 에 의거해 HTML ( css , javascript 포함 ) 을 서비스하는 서버 
				웹 브라우저 클라이언트로부터 HTTP Request를 받아 정적인 컨텐트를 서비스하는 서버 
				
WAS : Web Application Server ( Web Server + Web Container ) 
		 데이터베이스 연동 및 타 서버와의 연동 , 다양한 로직을 처리하는 동적인 컨텐트를 제공하기 위해 	만들어진 Application Server 	
		 
		 Web Container -> 서버 사이드에서 Servlet/JSP 의 실행환경을 제공 
		 
우리는 WAS 제품군 중에 Apache Tomcat을 사용한다 

Java Web Programming 환경 설정 
0. WAS 설치 
1. 포트 설정 : apache tomcat/conf/server.xml 에서 port 를 변경 ( 이유는 오라클 db와의 포트 충돌을 방지하기 위해 ) 
2. get 방식 한글처리 : apache tomcat/conf/server.xml 에서 URIEncoding="utf-8" 로 설정 
3. class 자동 리로드 설정 : apache tomcat/conf/context.xml 에서 reloadable="true" 설정 추가 
							 Servlet 을 포함한 java class가 변경될 때 서버에 자동 리로드되도록 설정 
							 
Client Side : HTML ( web document 의 content 담당 ) , css ( 디자인 스타일 담당 ) , javascript ( 행위 behavior 를 담당 ) 

Server Side : Servlet , JSP 

Servlet : Java Web Programming의 기반 기술 
		   Java Class 로 개발 
		   Model2 MVC 의 Controller 역할을 담당 		
		   
JSP : 	Java Server Page 
		동적인 웹페이지를 개발하기 위한 기술 -> Template Engine 	 
		HTML 구조 상에서 jsp tag 이용해 java code 를 삽입 
		Model2 MVC 의 View 역할을 담당 					 

 Web MVC (or Model2 MVC ) -> 이후 공부예정 
 -> Model : 비즈니스 로직과 데이터 액세스 로직을 담당 ( VO, DAO , Service ..와 같은 java component가 담당 ) 
     View : 클라이언트에게 동적인 화면을 제공 ( JSP 가 담당 ) 
     Controller : 제어자의 역할 , 클라이언트의 요청을 분석, Model과 연동하여 적절한 View를 선택해서 응답하게 하는 역할 
     			  ( Servlet 이 담당 ) 
     			  
     			  
Servlet Annotation : 서블릿 3.0 이상에서 지원 
					   @WebServlet( url-pattern ) -> url pattern : 클라이언트가 해당 서블릿에 요청하기 위한 url 이 된다 
					   										ex) 서블릿 클래스의 상단부에 @WebServlet("/HelloServlet") 어노테이션을 명시하면
					   										클라이언트는 아래와 같이 서블릿에 요청해야 한다 
					   										http://localhost:8888/webstudy05-servlet-basic/HelloServlet  			  
     			  
 어노테이션 ( @ ) : 의미있는 주석 , 컴파일 및 런타임 시점에 시스템에 영향을 주기 위한 의미있는 주석이다 
     			  
     			  
 설정 정보 ( 메타 데이터 ) 
 1) Annotation : 소스 코드 상에 설정 정보를 기술 
 2) XML : 소스 코드와 설정이 분리    			  
     			  
     			  
 Http Request Method ( 요청 방식 ) 
 1. get 방식 : 주로 정보 조회용 , url 상에 전송 정보가 노출됨 , 전송 데이터 용량에 제한     			  
 2. post 방식 : 정보 전달용 ( 서버 자원의 데이터 변경시 사용 ) , url 상에서 전송 정보가 노출되지 않는다 ( 로그인시 post 방식 사용 ) 
 				 http request body 부분에 정보가 내장되어 전송 ( 별도의 한글 처리가 필요 ) , 
 				 전송 데이터 용량 제한은 별도로 없음 (ex - 파일업로드시에도 post방식 사용, 서버 상황에 따라 다름 )
 				 


**webstudy-6-servlet-xml-config**

 web module version 을 3.1 이 아니라 2.5 로 생성 
 
 서블릿을 생성하면 어노테이션 설정이 아니라 xml 기반으로 설정된다 
 이 설정 파일은 WEB-INF/web.xml 로 생성된다 
 web.xml : Deployment Descriptor ( DD ) , 웹어플리케이션 설정 정보를 기술하는 문서 
 
 예) 2.5 버전 설정 
   <servlet>   
    <servlet-name>HelloServlet</servlet-name>
    <servlet-class>step1.HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>HelloServlet</servlet-name>
    <url-pattern>/HelloServlet</url-pattern>
  </servlet-mapping>
  
  위를 3.0 이상 버전 설정 
  @WebServlet(url pattern) 
  
 - client  ( html form ) 과 server ( Servlet ) 과의 연동 
 
 	client 측															서버측
 																	annotation or xml 로 url pattern 이 설정 
 <form action="url-pattern" method="get">						url pattern에 해당하는 서블릿의 doGet() 이 실행 			
<input type="text" name="food">
<button type="submit">전송</button>							클라언트가 보낸 정보를 받기 위해  String info=request.getParameter("food");
위 전송버튼을 누르면 아래 같은 형식으로 전송된다					와 같이 명시하면 사용자가 입력한 정보를 반환받는다 			
http://localhost:8888/webstudy/url-pattern?food=사용자입력정보

**webstudy07-servlet-LifeCycle**
- xml 기반 설정 이해위해 web module version 을 2.5 로 설정 
  현 프로젝트에서 서블릿 생성하면 어노테이션 기반 설정이 아니라 xml 기반 설정으로 만들어진다 
  
- 서블릿 계층구조 ( Servlet Hierarchy )   
  클래스 다이어그램은 servlet-hierarchy.jpg 를 참조한다 
  
  <<interface>>
  Servlet : 서블릿 인터페이스는 모든 서블릿(jsp 포함)이 implements 해야 하는 abstract method를 정의하고 있다 
  
  <<abstract>>
  GenericServlet : GenericServlet class 는 Servlet Interface를 implements 하는 추상 클래스(abstract class) 
  					 프로토콜에 독립적인 abstract class 
  					 일반적인 서버 프로그램이 가져야 하는 기능을 자식에게 물려주고 
  					 자식 차원에서 구현해야 하는 service() 는 abstract 메서드로 선언해서 구현을 강제한다 
  					 
  <<abstract>>
  HttpServlet : GenericServlet을 상속받는 abstract class 
  				  Http Protocol에 특화된 서비스를 구현하는 데 유용한 기능을 자식에게 물려준다 
  				  일반적인 Java Web Program ( Servlet , JSP ) 들은 이 클래스를 상속받아 자신의 서비스를 구현한다 						  
  
  위 설계방식의 장점 
  : 일반 웹어플리케이션 개발 진영에서는 Servlet API ( ex - HttpServletRequest , HttpServletResponse , HttpSession interface 등 )
    를 이용해 개발 , 실제 동작은 개별 WAS 제품군 ( ex - ApacheTomcat , JBoss 등 ) 에서 Servlet API를 구현한 구현체가 실행된다 
    만약 웹어플리케이션 배포가 다른 WAS 로 변경되더라도 웹어플리케이션 변경없이 잘 동작된다 
    -> 위의 설계방식은 웹어플리케이션과 개별 WAS 제품군과의 결합도를 낮추어 유지보수성을 향상시킬 수 있다는 장점이 있다 
  
  - Servlet LifeCycle 
  	init() -> service() -> destroy() 
  	Servlet/JSP 계층구조의 최상위 인터페이스인 Servlet 에서 정의한 abstract method 들이다 
  	-> 모든 서블릿/jsp가 구현하고 있는 라이프사이클 메서드 
  	
  	init() : 서블릿 당 한번 실행 , 서블릿의 초기화 작업을 수행 
  	service() : 클라이언트 요청시마다 매번 실행, 해당 서블릿이 클라이언트에게 서비스하는 메서드 
  				( 내부적으로 Http Request Method 에 따라 doGet() 과 doPost() 를 호출 ) 
    destroy() : 해당 서블릿이 서비스 종료되기 직전에 한번 실행 				 
  
    서블릿 라이프사이클을 관리하는 주체는 WAS( Web Container or Servlet Container ) 다 
    -> WAS 는 웹어플리케이션 설정 정보 ( web.xml or @WebServlet Annotation ) 를 로딩하고 
        클라이언트의 첫 요청시 서블릿 객체를 생성 , init() -> service() , WAS 종료시 destroy()를 호출해 실행하게 한다 
  
  
    Servlet LifeCycle 구조 
    
    									WAS( Web Server + Web Container )
    									
    client browser   --request-->   is loaded? ---no---> class loading
  											|						|
  											|					  서블릿 객체 생성 	: 단 한번 생성 
  											|						|
  											|					  init() 호출 : 단 한번 실행 		
  											|						|
  										  yes ----------->   service() -> doGet() or doPost() 호출 : 요청시마다 매번 실행 
  										  
  										  						 destroy() : WAS 종료 직전에 한번 호출 
  
  Web Application Server : Web Server + Web Container 
  							   Web Server : HTTP 에 의거해 html 서비스(html,javascript,css, image 등)하는 서버 
  							   Web Container : 서버 프로그램(Servlet/JSP) 실행환경 제공
  							   					  서버 프로그램의 라이프 사이클을 관리 	  

	LifeCycleServlet 이 10명의 클라이언트에게 요청을 받아서 서비스하였다 
	LifeCycleServlet 객체는 몇번 생성? 1번 
	init() 몇번 실행? 1번 
	service() -> doGet() 몇번 실행? 10번 
	destroy() 몇번 실행? 0번 ( destroy() 는 WAS 종료 직전에 한번 호출 ) 


- load on startup 설정 
  : Servlet LifeCycle의 특성상  첫 클라이언트가 요청시에 해당서블릿객체생성 , init 이 실행되는 데 
    첫 클라이언트의 요청에 대한 응답 속도가 느려질 수 있다 
    load on starup 설정을 통해 웹어플리케이션 시작 시점에 미리 해당 서블릿 객체 생성 및 init 을 실행하여 
    신속한 서비스가 되도록 한다  

web.xml 의 예 
  <servlet>    
    <servlet-name>LoadOnStartUpTestServlet</servlet-name>
    <servlet-class>step3.LoadOnStartUpTestServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

- ServletConfig 와 ServletContext 

ServletConfig : 개별 서블릿에 특정한 정보를 저장하는 객체 ( 서블릿이 동작하는 데 필요한 설정 정보 , ServletContext 객체의 주소값 ) 
				  서블릿 당 하나 생성 
				  HttpServlet을 상속받은 서블릿은 init(ServletConfig config) 메서드를 가지게 된다 
				  WAS(Web Container) 가 init 을 실행할 때 매개변수의 인자로 ServletConfig 객체를 전달한다 
				  
				  ex) 사원(서블릿) 당 하나의 사원증(ServletConfig) 

ServletContext : 웹 어플리케이션 내의 모든 서블릿과 jsp 즉 웹프로그램이 공유하는 자원 
				   웹 어플리케이션 당 하나 생성 
				   WAS(Web Container)가 웹어플리케이션 시작 시점에 ServletContext 객체를 생성하고 
				   종료 시점에 소멸된다 
				   
				   ex) 회사(web application) 의 사내 인트라넷(ServletContext) 
				   	    kosta238 					 cafe 

- ServletContextListener : Application Lifecycle Listener
							  웹어플리케이션 시작 시점과 종료 시점의 이벤트를 감지해서 시작 시점에 필요한 초기화 작업(ex-보안)과
							  종료 시점에 필요한 백업 및 로그 작업 등을 처리하는 데 이용할 수 있다 
							  
							  contextInitialized(event) : 웹어플리케이션 시작 시점에 호출되어 실행되는 메서드 
							  contextDestroyed(event) : 웹어플리케이션 종료 시점에 호출되어 실행되는 메서드 

**webStudy08-AnnotationConfig**
web module 3.0 이상에서 지원하는 어노테이션 기번 서블릿 설정 테스트

/**
 * web module 3.1 버전이므로 아래처럼 어노테이션 기반 설정이 가능
 * 
 * 2.5버전 web.xml 에서 설정한 load on startup을 어노테이션으로 설정 : 웹어플리케이션이 시작될 때 해단 서블릿 객체 생성 
 * -> init()까지 실행되도록. -> 미리 서블릿을 초기화하여 믈라이언트 요청시 신속한 서비스를 위해 설정 
 * 
 * @WebInitParam: ServletConfig 의 init-param을 설정
 */
@WebServlet(urlPatterns="/LifeCycleServlet",loadOnStartup=1,initParams={@WebInitParam(name="springconfig",value="springmvc.xml")})

**webstudy09-Cookie-Session**

HTTP 특성 : stateless, 사용자의 상태 정보를 유지하지 않는다.

세션 관리 : 사용자 상태 정보를 일정 조건동안 유지

사용자 상태 정보를 유지하는 방식 
1. Cookie
	사용자 상태 정보를 클라이언트에 저장
	저장 용량의 제한 (4kb)
	데이터 타입은 문자열로 한정
	Cookie 유효 시간을 별도로 설정하지 않으면 브라우저 실행시에만 유효
	Cookie 유효시간을 설정하면 그 유효시간 내에서만 Cookie를 사용할 수 있다.
	
	step1) 클라이언트가 접속, 서버측에서 쿠키를 생성해서 클라이언트에게 전달하며 클라이언트측에 쿠키가 저장
	
	client(browser) -- request --> SetCookieServlet
									Cookie 생성 (new Cookie(name,value))
									cookie.setMaxAge(30):// 30초동안 해당 쿠키가 유효
									response.addCookie(cookie); // 클라이언트 측으로 쿠키 전송
					<-- response --
									
	step2) 클라이언트가 접속, 서버측에서 쿠키를 확인해서 특정 쿠키가 존재하면 그 쿠키의 Value를 확인
	
	client(browser) -- request --> SetCookieServlet
									request.getCookies().Cookie[] // client측에 저장되어있는 쿠키들을 배열로 반환
									cookie의 getName() getValue()를 이용해 특정 쿠키값을 확인
									화면에 쿠키값 출력
					<-- response --
					
														
	
2. Session(HttpSession)
	사용자 상태 정보를 서버에 저장
	저장 용량 및 데이터타입에 제한이 없다.
	로그인, 로그아웃 시에 세션이 이용된다.
	WAS에 세션 유지 시간이 별도로 설정되어 있다. (apache-tomcat/conf/web.xml에 30분으로 세션유효시간이 설정되있음)
	개별 웹어플리케이션에서 세션만료시간을 설정할 때는 WEB=INF/web.xml에서 별도의 session timeout을 설정하면 된다.
	
	세션유지기간
	1) 지정한 유효시간 내에 새로운 요청이 없으면 세션이 만료
	2) 브라우저 종료시
	3) 로그아웃을 실행할 때

	HttpSeesion 관련 주요 메서드
	-HttpServletRequest의 getSession() or getSession(true) : 기존 세션이 있으면 기존 세션을 반환 , 없으면 새로 생성
	-HttpServletRequest의 getSession(false) : 기존 세션이 있으면 기존 세션을 반환, 없으면 null을 반환

	-HttpSession 의 setAttribute(name,value) : 세션에 특정 정보를 저장할 때 사용, String 타입의 name, Object 타입의 value로 할당한다
	-HttpSession 의 getAttribute(name) : 세션에 저장된 특정 정보를 반환받을 때 사용 , Object 타입의 객체가 리턴된다.

	-HttpSession 의 invalidate() : 세션을 무효화시킨다. 로그아웃시 사용

=============================================

로그인 과정에서의 세션 처리 흐름

client browser -- request --> LoginServlet
							if(db에있는 id와 password가 일치하면)
							HttpSession session=request.getSession(); // 세션 생성
							sesstion.setAttribute(name,value);//회원 인증 정보를 할당
							로그인 완료 응답하면 client에 jsessionid name의 cookie가 클라이언트측에 저장된다.
							
				<-- response --
				
====================================

로그인 후 인증 회원만 서비스 받을 수 있는 프로그램에 접속했을 때 세션 처리 흐름

client browser -- request --> CafeServlet
					HttpSession session = request.getSession(false);//기존 세션이 있으면 반환, 없으면 null
					//위 코드가 실행되면 클라이언트 브라우저에 저장된 jessionid값과 서버측에 저장되어 있는 session id값을 비교해
					//일치하면 세션 객체를 반환하고, 없거나 일치하지 않으면 null
					if(session!=null&session.getAttribute("인증정보name")!=null){세션이 존재하고 세션안 인증번호가 존재할떄}	

**webstudy10-jsp-basic**

JSP : Java Server Page
	동적인 웹페이지를 위한 기술 (Template Engine)
	HTML 문서 구조상에서 자바코드를 삽입하는 형태로 개발
	JSP는 WAS(Web Container)에 의해 .jsp -> .java -> .class 로 생성된다.
	생성된 java class는 HttpServlet의 자식 클래스이다. 즉 JSP is a Servlet
	
Web MVC (or Model2 Architecture MVC pattern) 에서는 Model 은 java component , View 는 jsp, Controller는 Servlet이 담당한다.

JSP 기본 문법 
1) JSP 주석 <%--     --%>    참고) HTML  주석 <!--   --> , JavaScript 와 CSS  주석 /*    */ 
2) scriptlet 스크립틀릿  <% java code  %>  :  service 메서드 내에서 삽입되는 자바코드 
3) expression 		<%=   %>   : service 메서드 내에 out.print() 로 삽입 
4) declaration  <%!  %> : 멤버변수 , 메서드 정의시 사용 
5) directive   <%@   %>  : 현 jsp 문서 정보를 웹컨테이너에 전달 , 한글처리방식 , 문서타입 , import , errorPage 등을 기술 


JSP LifeCycle - Servlet 과 동일(차이점은 jsp를 java class로 생성, 컴파일해서 실행)
    
    									WAS( Web Server + Web Container )
    														tomcat/work 디렉토리에 .java와 .class가 생성된다.
    client browser   --request-->   is loaded? ---no-----------> .jsp -> .java -> .class -> class loading
  											|						|
  											|					  객체 생성 	: 단 한번 생성 
  											|						|
  											|					  init() 호출 :jspInit() 호출 		
  											|						|
  										  yes ----------->   service() -> jspService() 호출 : 요청시마다 매번 실행 
  										  
  										  						 destroy() : jspDestroy() 호출 : AWS 종료 직전에 한번 호출 

**Webstudy11-jsp-form review**	

Query String(쿼리 스트링) : 웹프로그램에 입력데이터를 전달하는 방법

http://localhost:8888/webstudy11-jsp-form/step7-2-action-test.jsp?userName=123&userAge=456

? : URL 주소워 쿼리스트링을 구분
& : 여러 쌍의 데이터를 전달할 때 사용

javaScript event 처리 관련
onclick : form 요소에 마우스 클릭했을 때 발생하는 이벤트
onchange : form 요소에 value 가 변경됬을 때 발생하는 이벤트
onsubmit : form 전송시 발생하는 이벤트, return false 하면 전송되지 않는다
onkeyup : 키보드의 키를 눌렀다 떌 떄 발생하는 이벤트

JSP : Java Server Page : 웹페이지를 동적으로 생성하기 위한 기술, Template Engine 기술

Client						WAS
browser		--request->		Servlet/JSP ( 동적으로 html/javascript/css 로 구성된 html 문서 정보를 HttpResponse Body 영역으로 전달)
			<-response--
			
html/javascript/css
를 해석해서 화면에 반영


tip ) javascript 상에서 jsp를 기술
	alert("<%=age%> 세 미성년이므로 관람 불가");
	
	javascript 상에서 jsp를 기술할 때는 일반 문자열로 생각하고 처리하면 된다.
	javascript 자체는 client의 browser에서 해석
	jsp는 서버상에서 미리 실행되어 문자열로 변환되어 클라이언트에게 응답되므로 그것을 예상하고 코딩하면 된다
	<%=age%>와 같은 jsp는 이미 문자열로 서버상에서 변환되어 클라이언트에게 전달

**webstudy12-Model**

초기 웹 개발방식 : step1-jsp-db.jsp

jsp 상에서 jdbc 개발 코드를 적용해서 database와 연동하는 구조

JSP <----> Database

개발 생산성과 유지보수성을 향상시키기 위한 노력

Model1 Architecture : 웹어플리케이션 설계구조의 하나

Software Architecture -> 소프트웨어 아키텍쳐 (설계구조)는 소프트웨어 구성 요소들 사이의 관계를 표현
						소프트웨어 설계와 업그레이드를 통제하는 지침과 원칙


JSP <---->	Java Component(DAO / VO ... )	<---> Database

JSP : client의 request를 분석 , Java Component(bean) 와 연동 , 적절한 결과를 client에게 response
Java Component (bean) : Database Access Logic 과 Business Logic을 담당

참고) Java Component 를 Java Beans 라고 표현하기도 한다

**webstudy13-Model2MVC-basic**

-	Model2 Architecture MVC Design Pattern
	Model2 설계방식의 근간을 이루는 디자인 패턴이 MVC Pattern 이다.
	주로 WebMVC or Model2 MVC or MVC 라고 한다.
	웹 어플리케이션 설계 방식중 하나인 Web MVC를 적용해서 개발하는 연습을 한다.
	
	Web MVC : Web application 설계 방식의 하나로써 Model과 View와 Controller 영역으로 분리해서 설계 구현한다.
	
	Model : Java Component (or Java Bean ) DAO , Service , VO 등
		비지니스 로직과 데이터 엑세스 로직을 담당
	View : JSP 가 담당
		클라이언트에게 응답하기 위한 동적인 웹페이지를 제공
	Controller : Servlet이 담당
				웹 어플리케이션의 제어자 담당
				클라이언트의 요청을 분석, Model과 연동, 적절한 이동방식 (forward or redirect)로 View로 제어를 이동시켜 응답하게 한다.
				
	-기존 Model1 설계방식
	JSP <------->	Java Component <---->	Database
	
	Model2 MVC 설계방식
				Controller <->Model	<---->	Database
	View<-->	

-- 이동방식 forward와 redirect (Controller인 Servlet에서 View 인 jsp로 제어를 이동시키는 방식)

**webstudy14-forward-redirect**

1) forward 방식 : request와 response가 유지되면서 제어가 이동되는 방식

				Web Container 상에서 이동되므로 클라이언트 측은 이동 여부를 알 수 없다 (URL상의 변경이 없음)
				클라이언트가 재동작 즉 재요청(새로고침)할경우 request와 response가 유지되므로 기존 동작이 반복된다
				주로 정보 조회시 이용된다.
				
				Model과 연동결과를 request에 저장 (ex - request.setAttribute(name,value) 해서 View에 정보를 공유
				View는 클라이언트에게 응답시 연동 정보를 request로부터 반환 (ex-request.getAttribute(name))받아 정보를 제공
				
				Controller forward의 예)
				MemberDAO dao = new MemberDAO();
				MemberVO vo = vo = dao.findMemberById(id);				
				request.setAttribute("VO", vo);
				request.getRequestDispatcher("findbyid-success.jsp").forward(request, response);
				
2) redirect 방식 : 응답시 클라이언트에게 이동될 url을 지정하여 클라이언트가 이동하게 하는 방식
				기존 request와 response는 유지되지 않는다.
				재 요청시 기존 동작은 반복되지 않는다.
				서머 상태변경 (insert, delete, update를 통한 데이터 변경)에 적합


**webstudy15-webmvc-SingletonDesignPattern**

-Singleton Design Pattern
	: 시스템 상에서 단 한번의 객체를 생성해서 공유해 사용하고자 할 때 적용되는 디자인 패턴
	(참고 - Spring framework에서 기본 객체 운용방식이 singleton이다.)
	
	적용방안
	1) private 생성자 : constructor에 private aceess modifier를 명시해 외부(클래스)에서 객체 생성하는 것을 원천 차단한다.
	2) private static 멤버 변수로 자신의 객체를 생성 : private static 멤버변수는 클래스 로딩시에 한번 초기화되어
											heap영역에 객체 생성되고, 객체의 주소값을 meta space의 static 변수곡ㅇ간에 저장
	3) public static 메서드로 외부에 현 객체를 공유 : public static method는 외부에서 별도의 객체 생성업싱 클래스명으로 접근 가능하므로
											이러한 특성을 이용해 한번 만든 객체의 주소값을 외부에서 이용할 수 있도록 한다.
											
ex)public class ProductDAO{	
	private static ProductDAO instance=new ProductDAO();//내부에서 생성해서 static 변수에 저장
	private ProductDAO() {}//private 을 명시해서 외부(클래스, 패키지)에서 생성하는 것을 원천 차단한다
	public static ProductDAO getInstance() {//외부에서 한 DAO 객체를 이용할 수 있도록 public static method로 공유한다
		return instance;
		}
	}
	------------------------------------------
	외부 클래스에선 ProductDAO.getInstance().findProductById("id");와 같이 사용
	

**webstudy16-webmvc-session**

Session : 사용자 상태 정보를 서버 측에 저장

세션 유효 조건
1) 서버에 설정한 session timeout 시간 내에 재접속이 없을 경우
2) 브라우저를 끌 경우
3) 명시적으로 로그아웃을 할 경우 (session.invalidate()를 통해 세션을 무효화 시킬 때)

	-jsp상에서 세션 이용
	: jsp는 기본적으로 session을 사용할 수 있다.
	web container에 의해 jsp가 java class로 생생될 때 session 변수에 getSession() 메서드를 이용해
	세션 객체를 할당하는 코드가 기본정으로 정의되어 있다 (apache-tomcat\work 아래에서 확인)
	참고) getSession() 메서드는 기존 세션이 없으면 새로 생성, 기존 세션이 있으면 기존 세션을 반환한다.

- jsp에서 지원하는 객체 (jsp 내장 객체)
	request : HttpServletRequest 
	response : HttpServletResponse
	config : ServletConfig
	session : HttpSession
	application : ServletContext
	
	내장 객체의 정보 공유 범위
	request	<	session	<	application(ServletContext)
	
	request : reponse하기 전까지 유효
	session : 위의 세션 유효 조건까지
	application : 즉 ServletContext는 해당 web application 종료 전까지 유효
	
	-web mvc 에서 Controller(Servlet)과 View(JSP)에서 세션 사용의 예

	mvc-login.jsp 	--request-->	LoginServlet
										|
										|아이디와 패스워드가 일치하면 로그인 성공 아니면 실패
										|로그인 성공시에는 세션을 얻어와서 회원인증객체 정보를 할당한다->login-ok.jsp
										|로그인 실패시에는 -> login-fail.jsp
										|redirect 방식을 사용 (재동작 방지, request가 아니라 session에 정보공유)
										|
									login-fail.jsp : 로그인되지 않았습니다
										or
									login-ok.jsp : XXX님 로그인 되었습니다.


UML : Unified Modeling Language -> application 분석 설계 

​

UseCase Diagram : 요구분석을 위한 UML 

시스템에 요구되는 기능을 사용자 관점에서 나타낸 다이어그램 

​

Use Case : 사용자 관점의 기능 단위 ( 서비스 단위 ) ( ex - 도서검색 , 도서대여 , 로그인 ) 

Actor : 시스템 외부에 존재하면서 시스템과 상호작용하는 개체 ( ex - 고객, 관리자 ) 

​

<<include>>

기본 Use Case가 실행되기 위해서는 반드시 다른 특정 Use Case의 행위를 포함해야 한다는 것을 의미 

ex) 책대여Use Case -------> 회원인증Use Case 

​

<<extend>>

Use Case 가 특정 Use Case 에 정의된 행위로 선택적으로 추가 확장 될 수 있다는 것을 나타냄 

ex) 책대여Use Case <------ 부록CD 대여 Use Case 

​

Generalization 

기능의 추가 관계가 아니라 개념의 일반화로 봐야 한다 

ex) 도서 검색 Use Case 은 신착도서검색 Use Case , 간행물검색 Use Case 의 일반화된 Use Case 이다 


UseCase Diagram

-요구사항
비로그인 상태에서 회원 아이디로 회원 정보를 검색할 수 있다.(아이디에 따른 회원명, 주소)
비로그인 상태에서 회원 가입이 가능하다
회원가입시에는 반드시 아이디 중복확인 과정을 거쳐서 중복된 아이디가 아닐때 회원가입이 되도록 한다.

선택적으로 고객이 원한다면 자신의 프로필 이미지를 업로드 할 수 있도록 한다.
회원일 경우엔 로그인, 로그아웃이 가능하다.
회원은 주소로 다른 회원의 정보를 검색할 수 있다.
회원은 자신의 회원정보를 수정할 수 있다. (아이디를 제외한 비밀번호, 이름, 주소를 수정할 수 있음)


-회원관리 시스템 구축
0. 아이템 기획 - 프로젝트 목표 , 시스템 개요 , 팀빌딩
1. 요구분석 - UML의 UseCaseDiagram
2. 설계 - UML의 Class Diagram , ERD , UI 설계
3. 구현 - UseCase별 업무분장 , UseCase별 구현순서
		형상관리 , 이슈관리
		
1차 개발 -> 2차 개발 -> 3차 개발 -> 완료

업무별 구현 순서
아이디로 회원검색 -> 로그인, 로그아웃 -> 주소로 회원검색 -> 회원정보수정 -> 회원가입 및 아이디 중복확인

1. 아이디로 회원검색
index.jsp -----	FindMemberByIdServlet -----	MemberDAO -----	DB
					|
					|forward			findMemberById(id) : MemberVO
					|
				findbyid-ok.jsp : 회원정보를 보여준다(아이디, 이름, 주소)
				or
				findbyid-fail.jsp : 아이디에 회원정보가 존재하지 않습니다.


2.로그인, 로그아웃

1) 로그인

index.jsp -----	LoginServlet -----	MemberDAO -----	DB
					|			login(id,password) : MemberVO
					|
					|Model 연동 후 로그인 성공시 session에 회원객체를 저장 (name : mvo)
					|그 후 index.jsp로 redirect 한다. index.jsp에서는 로그인폼대신 "XXX님"
					|아래 라인에 "로그아웃"링크를 준다.
					|
					|로그인 실패시 login-fail.jsp에서 alert로 로그인 실패 후 index.jsp로 redirect.
	구현순서 : SQL -> Model(DAO) -> Controller -> view

	http request method : post , 제어 이동방식 : redirect , 정보공유 : session
	
2) 로그아웃

	index.jsp ----	LogoutServlet
						|
						|	세션을 무효화 session.invalidate()
						|
						|	redirect
					index.jsp
URL 상에서 LogoutServlet을 명시해서 request를 했을 때 로그아웃이 되는 것은 바람직하지 않음 -> 로그아웃 요청을 get방식에서 post로 변경한다
로그인, 로그아웃 request method는 post방식을 권장

Http Response status code (응답 상태 코드)
200 - 정상수행
404 - not found , action 과 url-pattern , file 명 확인
405 - method 지원하지 않음 (request method : get, post와 Controller의 doget(), doPost를 확인)
500 - 서버오류 (Exception , 콘솔 메세지를 확인해 코드 수정)

3. 주소로 회원검색 

index.jsp 		-------------  FindMemberListByAddressServlet -----   MemberDAO --------- Database 
주소 입력받아 전송 					|
										|										    findMemberListByAddress(address) : ArrayList<MemberVO>
										| request 에 list를 저장 
										| forward 방식으로 이동 
										| 
									findbyaddress-result.jsp
									
									아이유님 종로에 사는 회원리스트입니다 
									
									종로에 사는 회원의 아이디와 이름을 테이블 형식으로 제공한다 


4. 회원정보수정


	index.jsp   --- update-form.jsp --------------- UpdateMemberServlet ------- MemberDAO	---------------- Database 
					  아이디를 제외한															   updateMember(MemberVO) 
					  패스워드											|
					  													|  db 및 session 회원정보수정
					  이름											    |  redirect  
					  주소를 제공( 세션의 회원객체를 이용 )			update-result.jsp ( 수정된 회원정보 제공 : session의 회원정보를 이용 ) 
					  
					  id text 요소 : readonly 속성 -> 읽기전용 
					  나머지는 수정가능 
					  
					  post 방식 요청 

4.1 회원정보수정 코드 개선 
     문제점 : index.jsp에서 회원정보수정폼 즉 update-form.jsp 로 이동시 만약 index.jsp에서 세션타임아웃이 되어있는 상태로 클릭하게 되면 
     		  세션이 해제 되어 있으므로 NullPointerException 이 발생 -> 이슈관리대장에 등록, 개선점을 정리 -> 이슈관리를 명세화 
     		    
     개선점 : index.jsp 의 회원수정폼 링크 -----> UpdateFormServlet 
     														|
     														| session 및 인증정보를 체크 
     														| 
     														| redirect 
     														update-form.jsp (로그인 상태이면)
     														or
     														index.jsp (비로그인 상태이면) 


4.2 회원정보수정폼 인증체크 코드 개선
	이슈사항 update-form 회면상에서 세션 타임아웃 상태에서 수정하기 버튼 눌렀을 때 세션이 해제되있으므로
			NullPointerExeption이 발생
	개선사항 UpdateMemberServlet에서 세션 및 인증정보를 체크해서 확인


5. 회원가입 

index.jsp  ---- register-form.jsp ------ RegisterMemberServlet  --- MemberDAO 			-----------  Database
				   회원가입폼을 제공 											  register(MemberVO) 	 
													|
													| redirect 
												register-result.jsp 	
		
					
6.아이디 중복확인

별도의 프로젝트 webstudy 18 에서 html의 hidden과 javascript popup을 단위테스트

index.jsp  ---- register-form.jsp -- 중복확인 버튼 클릭   CheckIdServlet	---	MemberDAO	------  Database
															|			checkId(id) : boolean (존재하면 true, 아니면 false)
															|forward								사용불가		사용가능
															|
														true :사용불가 -> check-id-fail.jsp(팝업) -> 본창의 id text 지우고 포커스
														false : 사용가능 -> check-id-ok.jsp(팝업) -> 본창의 hidden checkFlag에 인증아이디할당

**webstudy19-front-controller-pattern-step1**

-Front Controller Design Pattern
모든 클라이언트의 요청을 하나의 진입점(FrontController)으로 통합하여 처리하는 디자인 패턴

웹 어플리케이션 서비스의 공통 정책을 일관성있게 효과적으로 처리할 수 있다.
(공통 정책 : 인코딩 , 보안(인증,인가) , 예외처리, 데이터수집, 마케팅정책 등)

FrontController 적용 전 Web MVC 구조

client 1 ---- FindMemberByIdServlet --- Model
client 2 ---- RegisterCarServlet --- Model

FrontController 적용 후 Web MVC 구조

client 1 --- 검색요청 - FrontControllerServlet --- Model
client 2 --- 등록요청
client 3 --- 수정요청

모든 클라이언트의 다양한 요청을 하나의 FrontController 가 처리한다

--위 구조를 구현하기 위한 방안
FrontControllerServlet이 다양한 요청을 구분하기 위해서는 form의 hidden tag를 이용해서 commandname으로
value를 전송해서 FrontControllerServlet이 클라이언트의 요청을 인지하게 하면 된다.
또한 query string 방식을 이용하는 것도 가능하다 (url?command=register)

FrontControllerServlet의 구조
//컨트롤러 로직을 정의
doDispatch(){

}
doget(){
	doDispatch();
}
doPost(){
	//post방식 인코딩(한글처리) 작업
	doDispatch();
}
refactoring : 결과의 변경없이 코드의 구조를 재조정함을 의미
				입,출력 결과는 동잃하되 프로그램의 구조를 개선함으로써 생산성 및 유지보수성, 가독성을 높이는 활동

생각해 볼 점 : 클라이언트의 다양한 요청을 처리하는 doDispatch메서드의 처리 작업이 비대하다
개선점 : 방안1 -> 각 요청별 메서드 분할
FrontControllerServlet의 구조
//컨트롤러 로직을 정의
doDispatch(){
	if(){
		findCarByNo();
	}else if(){
		registerCar();
	}
}
findCarByNo(){}
registerCar(){}
doget(){
	doDispatch();
}
doPost(){
	//post방식 인코딩(한글처리) 작업
	doDispatch();
}

**webstudy19-front-controller-pattern-step2**

refactoring : 결과의 변경없이 코드의 구조를 재조정함을 의미
				입,출력 결과는 동잃하되 프로그램의 구조를 개선함으로써 생산성 및 유지보수성, 가독성을 높이는 활동

	step1 FrontControllerVer2에서 doDispatch() 및 개발 컨트롤러 로직 정의 메서드 (findCarByNo(),registerCar())를
	정의해서 요청에 대한 서비스를 처리했다.

	생각해 볼 점 : 하나의 FrontControllerServlet class에서 모든 요청을 처리하므로
					서비스가 추가될수록 클래스 자체의 업무 및 코드량이 증가 -> 생산성 및 유지보수성 저하
					
	개선방안 : 개별 컨트롤러 로직 정의 메서드 (findCarByNo(),registerCar())를 별도의 클래스로 분화시켜
					독립적인 단위로 개발하고 운영할 수 있도록 변경

				client --- 검색 --- FrontControlServlet ---- FindByNoController --- Model --- DB
				client --- 등록 ---  								 ---- RegisterCarController
				
**webstudy19-front-controller-pattern-step3**

doDispatch 메서드가 비대햇저 각 요청별로 메서드 정의하는 방식으로 구조를 개선
 ver1 : doDospatch 메서드에서 모든 요청을 처리
 ver2: doDispatch메서드가 비대해져 각 요청별로 메서드 정의하는 방식으로 구조를 개선
 		findCarByNo , registerCar 요청 처리를 별도의 메서드로 분화
 ver3 : FrontControllerServlet class자체가 비대해지므로
 	개별 요청 처리를 별도의 클래스에서 담당하도록 설계
 	FindCarByNoController, RegisterController에서 각각의 컨트롤러 로직을 구현
				client --- 검색 --- FrontControlServlet ---- FindByNoController --- Model --- DB
																				findByNo()
				client --- 등록 ---  								 ---- RegisterCarController 
																				register()
ver4(step3) : ver3(step2)의 구조는 FrontControllerServlet이 개별 Controller 객체의 다양한 메서드를 직접 호출해서 사용하는 구조
				-> FrontControllerServlet 과 개별 Controller 객체는 결합도가 높은 상태
				
				개선방안 : 개별 Controller 들을 계층구조화하여 다형성을 지원하도록 설계 -> 참고)다형성 : 하나의 소통방식으로 다양한객체동작
							예) 재생버튼이라는 하나의 소통방식으로 유튜브, CDP 등 다양한 플레이어를 동작 가능하다
							FrontControllerServlet은 하나의 소통방식으로 다양한 컨트롤러 객체들을 제어할 수 있도록 설계를 변경

							Controller Interface를 정의
							abstract method : public String execute(HttpServletRequest request, HttpServletResponse response) throws  Exception;
							return 하는 String 정보는 클라이언트에게 응답하기 위한 view정보 (ex-findbyno-ok.jsp or registercar-result.jsp...)
							-> forward방식일때 return"XXX.jsp";
								redirect 방식일때는 return "redirect:XXX.jsp";와 같이 서두에 redirect:문자열을 명시하여 리턴한다.(Spring Framework에서도동일)
							
							모든 개별 컨트롤러는 위의 Controller interface를 구현하고 추상메서드 execute() 를 자신에 맞게 정의해야 함
							
							client	--	검색	--	FrontControllerServlet	--	Controller interface			
																								|										|
																								FindByNoCarController		|
							client	--	등록	--																					RegisterCarController


**webstudy19-front-controller-pattern-step4**			ver.5(Step4)																																														

위의 ver4(step3)구조에서 서비스가 확장되면 (컨트롤러가 추가된다면) FrontControllerServlet의 담당 컨트롤러 객체 생성 코드가 추가되어야 한다.
-> FrontControllerServlet과 개별 컨트롤러는 결합도가 높은 상태

개선방안 : 개별 컨트롤러 객체 생성을 전담하는 HandlerMapping(담당자 연결)을 추가 설계해서 구현한다.	
																							
client	--	FrontControllerServlet	--	HandlerMapping	--	Controller Interface			
																								|							|
																							FindController		RegisterCarController
																											
Web MVC 에서 Front Controller Design Pattern을 적용했을 때 컨트롤러 영역의 요소
1.FrontControllerServlet : 모든 클라이언트의 요청을 통합하는 진입점의 역할을 하는 서블릿 -> 공통 정책을 수행 (인증, 예외처리 , 인코딩 등)
2. HandlerMapping : 개별 컨트롤러 객체 생성을 전담하는 Factory 객체
							FrontControllerServlet 에섯 객체 컨트롤러 객체 생성의 부담을 덜고 결합도를 낯추어 유지보수성을 향상시키기 위해 설계
							(참고 : Spring Framework에서도 이러한 역할을 하는 객체를 handlerMapping이라고 표현한다.)
3. Controller Interface : 개별 컨트롤러 객체의 상위 인터페이스, 개별 컨트롤러 구현체들을 캡슐화, 추상화하여
									다형성을 지원하기 위한 목적으로 설계
									-> FrontControllerServlet 에서는 개별 컨트롤러 구현체를 보지 않아도 상위 인터페이스인
									Controller의 abstract method인 execute()만 실행하면 개별 컨트롤러들이 동작된다
									(다형성 : 하나의 소통방식으로 다양한 객체(컨트롤러 객체)들이 각자의 방식으로 동작되는 성질)
4. 개별 Controller 구현 객체 : 실제 클라이언트의 구체적인 요청을 처리하는 컨트롤러 로직을 정의한 객체

ver5(step4)
생각해볼점 : 서비스가 확정일 때 , 즉 개별 컨트롤러가 추가될 때  매번 HandlerMapping의 create 메서드의 구현부 코드가 추가되어야 한다.
		-> 컨트롤러 객체 생성을 자동화하는 방안 <ver6 , step5에서 설계, 구현해본다.)

ver6(step5)
	
개선방안 : HandlerMapping의 컨트롤러 객체 생성을 자동화
			java Reflection API를 이용해 컨트롤러 객체를 런타임시에 자동화시키도록 한다.
			Reflection : 런타임 시점에 동적으로 객체 생성하고 제어할 수 있도록 하는 기술
			단위 테스트 : src\test\java 에서 Reflection API를 테스트
			
			HandlerMapping 의 create 메서드에 객체 자동생성되도록 기능을 구현 -> 효과 : 컨트롤러가 추가되어도 (or 서비스 확정되어도)
																												HandlerMapping 코드는 추가변경할 필요가 없다 -> 생산,유지보수성 향상
			
Ver7(step6)

생각해볼점 : client측에서 command를 정보 , 즉 컨트롤러명을 form 의 hidden 또는 query string 형식으로 매번 전송해야 한다.\
				예1) <form action = "FrontControllerServlet">
						<input type = "hidden" name="command" value="RegisterCarController">
				예2) <a href="url-pattern?command=FindCarListController">차리스트</a>

개선방안 : url-pattern과 함께 command 매번 전송하는 구조에서 url-pattern상에서 컨트롤러 명을 명시해 전송하는 구조로 변경
			-> *.do url-pattern : FrontControllerServlet에서 처리하도록 설정
			
			예) <form action = "RegisterCarController.do"></form>
			예2) <a href="FindCarListController.do">차리스트</a>
			
			보다 간결하게 요청이 가능하다.	*.do 스타일 요청 처리에 대한 단위테스트 : 20번쨰 프로젝트에서 테스트
			
**webstudy22-mvc-product-date**

Web MVC + Front Controller Design Pattern 상에서 database의 date 형을 이용한 웹어플리케이션 구현 연습

Model : org.kosta.myproject.model.ProductVO
			 org.kosta.myproject.model.ProductDAO

Controller : org.kosta.myproject.controller.FrontControllerServlet
				org.kosta.myproject.controller.HandlerMapping
				org.kosta.myproject.controller.Controller
				
view : index.jsp

src/test/java : TestUnitProduct 단위 테스트

**webstudy23-DBCP**

DBCP : DataBase Connection Pool
		데이터베이스 연동시 컨넥션 객체를 미리 생성해 놓고 빌려주고 반납받는 형식으로
		시스템 성능을 향상시키기 위한 기술 
		컨넥션 생성 소멸 방식이 아니라 빌려주고 반납받는 원리
		
javax.sql.DataSource Interface : 다양한 dbcp 구현 객체들이 implements 하는 인터페이스
dbcp 구현체를 사용하는 Application 측에서 단일한 방식으로 다양한 dbcp 구현체들을 실행할 수 있게 한다.
dbcp 구현체를 변경해도 영향은 최소화된다. Application과 dbcp 구현체의 결합도를 낮게한다.

**webstudy24-mvc-product-date-DBCP**

webstudy24-mvc-product-date 웹어플리케이션에 DBCP를 적용해보는 예제

Model : DataSourceManager class를 추가, DAO에서 DataSourceManager의 DataSource(DBCP)를 이용해 컨넥션을 빌려오고 
		반납받는 형식으로 시스템 성능을 향상시킨다.
**webstudy25-EL**

-EL (Expression Language)
JSP버전이 상향되면서 추가된 스크립트 언어
기존 Scriptlet atag의 표현식(<%=%>의 업그레이드 된 버전(%{})

JSP속성영역 (request,session,application(ServletContext))에 저장된 객체의 property
-> EL을 이용하면 별도의 import, Object Casting 절차 필요없이 바로 출력이 가능, 다양한 연산 및 자동 형변환이 된다.
	JSTL과 연동이 가능

EL은 Model객체의 get계열 메서드와 is계열의 메서드에만 접근 가능

**webstudy26-JSTL**

JSTL : Jsp Standard Tag Library
		view(jsp)에서 자주 사용하는 기능 (조건문, 반복문, 자료구조의 데이터표현)을 미리 구현해놓은 태그 라이브러리
		EL과 함께 사용해서 데이터를 표현
		
	환경설정 : WEB-INF\lib\jstl-1.2.jar 파일을 위치시킨다.
		다운로드 경로 : https://mvnrepository.com/artifact/javax.servlet/jstl/1.2


**webstudy27-jstl-member**

상세내용 -> src\main\resources\요구사항-분석-설계.txt

회원관리 프로그램 : Controller 영역 : FrontController Desiggn Pattern 적용
							Model 영역 : DBCP(DataSource)적용
							View 영역 : EL 과 JSTL 적용

**webstudy28-jstl-member-CheckLoginInterceptor**

refactiring 입출력 동일, 프로그램 내부구조 개선을 통해 유지보수성, 생산성, 가독성 향상

인증체크 : 로그인한 사용자만 서비스 받을 수 있는 개별컨트롤러에서 각각 세션 및 세션에 저장된 인증정보를 확인,
 비 로그인 상태이면 로그인 폼이 있는 view로 이동(ex : index.jsp)
 서비스 즉 컨트롤러 수가 확대될수록 중복된작업이 증가한다.
 
 개선방안 : FrontControllerServlet 차원에서 인증여부를 확인하면 개별컨트롤러에서 각각 인증체크를 하는 부담을 덜수있다
 			-> 서비스 수가 많을수록 효과적
 			
 			FrontControllerServlet 에서 별도로 인증체크기능을 전담하는 CheckLoginInterceptor를 이용해
 			반환값이 false인 경우에는 개별 컨트롤러를 실행시키지 않고 로그인폼이 있는 view로 redirect시키도록 한다.
 			
 **webstudy29-mvc-path-test**
 
 Web MVC 구조 상에서 경로 연습
 form action 경로 처리
 Controller -> view 로 제어 이동시 forward와 redirect경로 처리

 View에서 경로 처리시 사용하는 EL : ${pageContext.request.contextPath}
 
 <%-- 아래 el을 실행하면 현재 웹어플리케이션 경로(컨텍스트경로)가 출력된다. --%>
${pageContext.request.contextPath}
<%-- 아래 EL을 이용해 프로젝트명을 기준으로 경로 설정을 하면 디렉토리 구조가 변경되어도 상관없다(유지보수성이 좋다) --%>
<img alt="댕댕이" src="${pageContext.request.contextPath}/images/댕댕.gif">
 
 **webstudy30-mvc-forward-join**
 
 DB Modeling : ERD 연습 (src\main\resources에 저장)
 SQL DDL : foreign key 제약조건
 SQL DML : Join SQL 연습
 
 Application  Modeling : Class Diagram 연습 (src\main\resources에 저장)
 
 View : jsp forward를 적용해본다.
 
 환경설정 : library -> WEB-INF\lib\jstl-1.2.jar 와 tomcat-juli-8.5.77.jar
 
 요구사항 ) 웹프로젝트를 실행하면 첫 화면에 총사원수가 3명이라는 정보가 제공되어야 한다.
 				총사원수는 데이터베이스에 저장되어 조회되어야 하는 정보
 				
 												FrontControllerServlet	---	HandlerMapping	---	HomeController	---	EmployeeDAO	---	Database
 client	index.jsp(jsp.forward)		|
 												horm.jsp	에서 사원수 제공
 			
 구현방안
 		jsp forward action tag를 이용해 HomeController.do를 실행하여 Model과 연동한후 결과정보를 view(home.jsp)로 제공하면 된다.
 		jsp forward action tag 단위테스트 : webapp\forward-test 디렉토리 내에서 테스트
 
 web mvc 기본 프로그램 구성
 org.kosta.myproject.model : DataSourceManager (dbcp)
 org.kosta.myproject.contoller : FrontControllerServlet, HandlerMapping, CheckLoginInterceptor,Controller
 
 **webstudy31-mvc-jstl-import**
 
 문제제기 : webstudy30 의 view 구조에선 각 jsp(home,list,detail,emp-count)마다 html 선언부, css, javascript
 div container의 동일한 코드를 반복해서 코드를 기입했다.
-> 이런 중복 작업을 피하고 효율적으로  view구현을 하기위한 방안이 필요

refactoring : 입출력은 동일하나 내부구조를 개선, 생산 유지보수성을 향상.

해결방안 : view측에 공통 메인 uii를 정의한 layout.jsp를 두고 이 layout..jsp에서 변경되는 컨텐트영역을 
			jstl import(<c:import url="${requestScope.url}"/>)를 이용해 페이지 정보를 실행시 가져오도록 구현한다.
			위의 url부분은 각 컨트롤러에서 request영역에 setAttribute한다.
			각 jsp에서는 이전에 동일한 코드를 반복적으로 기입할 필요없이 자신의 본문내용(컨텐트)만 정의하면 되도록 한다.
 
 **webstudy32-css-bootstrap**
 
 bootstrap : 반응형 웹사이트를 개발하기 위한 css framework
 
 반응형 웹 : 다양한 기기(pc, 모바일, 테블릿 등)에 최적화된 화면을 제공하는 것을 말한다.
 				스마트 폰에서는 작은 화면에 최적화되게 화면을 제공하고
 				큰 화면을 가진 스마트 tv 또는 pc에서는 그에 최적화되게 변경되어 보여주는 것을 말한다.
 
 css의 @media query (미디어 쿼리) -> html5, css3에 의해 지원되는 반응형 웹을 위한 기술.  기기화면의 종류와 크기에 따라 
 													적절한 디자인을 제공. 미디어쿼리 사용을 위한 선언부.
 													<meta name="viewport" content="width=device=width, initial-scale=1">
 위의 미디어 쿼리를 통한 반응형 웹기술을 부트스트랩에서 기본적으로 제공.
 
 **webstudy33-myboard-basic**
 
게시판

**webstudy34-myboard-pagination**


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 